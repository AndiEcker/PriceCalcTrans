[main]
NumConditionTypes = 7
NumActionTypes = 10

[ConditionType0]
typeCaption = _TR("Selling Date Range")
isExclusive = True
paramTemplate = _DATE_FORMAT('From') + _DATE_RANGE_SEP + _DATE_FORMAT('To')
luaTemplate = _DAY_XVAR('sts_ressellingdate') + ' >= ' + _DAY_XLIT('From') + _OP_AND + _DAY_XVAR('sts_ressellingdate') + ' <= ' + _DAY_XLIT('To')
luaTemplSupportedVersions = ["sts_ressellingdate >= os.time{year={FromYear}, month={FromMonth}, day={FromDay}} and sts_ressellingdate <= os.time{year={ToYear}, month={ToMonth}, day={ToDay}}"]
param = _DATE_RANGE_DICT('From', 2012, 1, 1, 'To', 2012, 12, 31)
validationTemplate = _DATE_RANGE_VALID_EXPR('From', 'To')
validationCaption = _TR("Start date (" + _DATE_FORMAT('From') + ") has to lie before the End date (" + _DATE_FORMAT('To') + ")")

[ConditionType1]
typeCaption = _TR("Arrival Date Range")
isExclusive = True
paramTemplate = _DATE_FORMAT('From') + _DATE_RANGE_SEP + _DATE_FORMAT('To')
luaTemplSupportedVersions = ['sts_fromdate >= os.time{year={FromYear}, month={FromMonth}, day={FromDay}} and sts_fromdate <= os.time{year={ToYear}, month={ToMonth}, day={ToDay}}']
luaTemplate = _DAY_XVAR('sts_fromdate') + ' >= ' + _DAY_XLIT('From') + _OP_AND + _DAY_XVAR('sts_fromdate') + ' <= ' + _DAY_XLIT('To')
param = _DATE_RANGE_DICT('From', 2012, 1, 1, 'To', 2012, 12, 31)
validationTemplate = _DATE_RANGE_VALID_EXPR('From', 'To')
validationCaption = _TR("Start date (" + _DATE_FORMAT('From') + ") has to lie before the End date (" + _DATE_FORMAT('To') + ")")

[ConditionType2]
typeCaption = _TR("Full Stay Date Range")
isExclusive = True
paramTemplate = _DATE_FORMAT('From') + _DATE_RANGE_SEP + _DATE_FORMAT('To')
luaTemplate = _DAY_XVAR('sts_fromdate') + ' >= ' + _DAY_XLIT('From') + _OP_AND + _DAY_XVAR('sts_todate') + ' <= ' + _DAY_XLIT('To')
luaTemplSupportedVersions = []
param = _DATE_RANGE_DICT('From', 2012, 1, 1, 'To', 2012, 12, 31)
validationTemplate = _DATE_RANGE_VALID_EXPR('From', 'To')
validationCaption = _TR("Start date (" + _DATE_FORMAT('From') + ") has to lie before the End date (" + _DATE_FORMAT('To') + ")")

[ConditionType3]
typeCaption = _TR("Length Of Stay Range")
isExclusive = True
paramTemplate = "{FromDays}" + _INT_RANGE_SEP + "{ToDays}"
luaTemplate = 'sn_los >= {FromDays} and sn_los <= {ToDays}'
luaTemplSupportedVersions = []
param = {"From Days" : 7, "To Days" : 13}
validationTemplate = '{FromDays} in range(1,101) and {ToDays} in range(1,366) and {FromDays} <= {ToDays}'
validationCaption = _TR("First value has to be less than the second one. First value has to be between 1 and 100, second between 1 and 365")

[ConditionType4]
typeCaption = _TR("Intersection Date Range")
isExclusive = True
paramTemplate = _DATE_FORMAT('From') + _DATE_RANGE_SEP + _DATE_FORMAT('To')
luaTemplate = _DAY_XVAR('sts_fromdate') + ' <= ' + _DAY_XLIT('To') + _OP_AND + _DAY_XVAR('sts_todate') + ' > ' + _DAY_XLIT('From')
luaTemplSupportedVersions = []
param = _DATE_RANGE_DICT('From', 2012, 1, 1, 'To', 2012, 12, 31)
validationTemplate = _DATE_RANGE_VALID_EXPR('From', 'To')
validationCaption = _TR("Start date (" + _DATE_FORMAT('From') + ") has to lie before the End date (" + _DATE_FORMAT('To') + ")")

[ConditionType5]
typeCaption = _TR("Sold min. days before arrival")
isExclusive = True
paramTemplate = "{MinDays} days before " + _DATE_FORMAT('From') + _DATE_RANGE_SEP + _DATE_FORMAT('To')
luaTemplate = _DAY_XVAR('sts_fromdate') + ' >= ' + _DAY_XVAR('sts_ressellingdate') + ' + {MinDays}' + _OP_AND + _DAY_XVAR('sts_fromdate') + ' >= ' + _DAY_XLIT('From') + _OP_AND + _DAY_XVAR('sts_fromdate') + ' <= ' + _DAY_XLIT('To')
luaTemplSupportedVersions = []
param = _DATE_RANGE_DICT('From', 2012, 1, 1, 'To', 2012, 12, 31, 'Min Days', 30)
validationTemplate = _DATE_RANGE_VALID_EXPR('From', 'To') + ' and {MinDays} in range(1,366)'
validationCaption = _TR("Start date (" + _DATE_FORMAT('From') + ") has to lie before the End date (" + _DATE_FORMAT('To') + ") and the number of days has to be between 1 and 365")


[ConditionType6]
typeCaption = _TR("Stay-Day in Date Range")
isExclusive = True
paramTemplate = _DATE_FORMAT('From') + _DATE_RANGE_SEP + _DATE_FORMAT('To')
luaTemplate = _DAY_XVAR('sts_fromdate') + ' + sn_daynumber - 1 >= ' + _DAY_XLIT('From') + _OP_AND + _DAY_XVAR('sts_fromdate') + ' + sn_daynumber - 1 <= ' + _DAY_XLIT('To')
luaTemplSupportedVersions = []
param = _DATE_RANGE_DICT('From', 2012, 1, 1, 'To', 2012, 12, 31)
validationTemplate = _DATE_RANGE_VALID_EXPR('From', 'To')
validationCaption = _TR("Start date (" + _DATE_FORMAT('From') + ") has to lie before the End date (" + _DATE_FORMAT('To') + ")")


[ActionType0]
typeCaption = _TR("Discount Percentage")
isExclusive = True
paramTemplate = "{DiscountPercentage}"
luaTemplate = 'RC_SN_DISCOUNT_PERCENTAGE = {DiscountPercentage}'
luaTemplSupportedVersions = []
param = {'Discount Percentage' : 6.0}
validationTemplate = 'int({DiscountPercentage}) in range(1,101)'
validationCaption = _TR("Percentage value ({DiscountPercentage}) has to be between 1 and 100")

[ActionType1]
typeCaption = _TR("Promo Code")
isExclusive = True
paramTemplate = "{PromoCode}"
luaTemplate = 'RC_SS_PROMOCODE = "{PromoCode}"'
luaTemplSupportedVersions = []
param = {'Promo Code' : _TR("PROMO CODE")}
validationTemplate = 'len("{PromoCode}") > 0 and len("{PromoCode}") <= 10'
validationCaption = _TR("Length of promo code has to between 1 and 10")

[ActionType2]
typeCaption = _TR("Channel")
isExclusive = True
paramTemplate = "{Channel}"
luaTemplate = 'RC_SS_CHANNEL = "{Channel}"'
luaTemplSupportedVersions = []
param = {'Channel' : _TR("CHANNEL")}
validationTemplate = 'len("{Channel}") > 0'
validationCaption = _TR("Channel code cannot be empty")

[ActionType3]
typeCaption = _TR("NN1")
isExclusive = True
paramTemplate = "{NN1}"
luaTemplate = 'RC_SS_NN1 = "{NN1}"'
luaTemplSupportedVersions = []
param = {'NN1' : _TR("NN1")}
validationTemplate = 'True'
validationCaption = _TR("")

[ActionType4]
typeCaption = _TR("Free Days")
isExclusive = True
paramTemplate = "{FreeDays}"
luaTemplate = 'if sn_daynumber > sn_los - {FreeDays} then day_price = 0 end'
luaTemplSupportedVersions = ['if sn_daynumber > sn_los - {FreeDays} then return ( 0 ) end']
param = {'Free Days' : 1}
validationTemplate = '{FreeDays} in range(1,101)'
validationCaption = _TR("The number of free days has to be between 1 and 100")

[ActionType5]
typeCaption = _TR("Market Code")
isExclusive = True
paramTemplate = "{MarketCode}"
luaTemplate = 'RC_SS_MARCETCODE = "{MarketCode}"'
luaTemplSupportedVersions = []
param = {'Market Code' : _TR("MARKET CODE")}
validationTemplate = 'len("{MarketCode}") > 0'
validationCaption = _TR("Market code cannot be empty")

[ActionType6]
typeCaption = _TR("Source Code")
isExclusive = True
paramTemplate = "{SourceCode}"
luaTemplate = 'RC_SS_RESERVATIONSOURCE = "{SourceCode}"'
luaTemplSupportedVersions = []
param = {'Source Code' : _TR("RESERVATION SOURCE CODE")}
validationTemplate = 'len("{SourceCode}") > 0'
validationCaption = _TR("Reservation source code cannot be empty")

[ActionType7]
typeCaption = _TR("Medium Code")
isExclusive = True
paramTemplate = "{MediumCode}"
luaTemplate = 'RC_SS_RESERVATIONMEDIUM = "{MediumCode}"'
luaTemplSupportedVersions = []
param = {'Medium Code' : _TR("RESERVATION MEDIUM CODE")}
validationTemplate = 'len("{MediumCode}") > 0'
validationCaption = _TR("Reservation medium code cannot be empty")

[ActionType8]
typeCaption = _TR("Percentage in Date Range")
isExclusive = False
paramTemplate = "{Percentage}@" + _DATE_FORMAT('From') + _DATE_RANGE_SEP + _DATE_FORMAT('To')
luaTemplate = 'if ' + _DAY_XVAR('sts_fromdate') + ' + sn_daynumber - 1 >= ' + _DAY_XLIT('From') + _OP_AND + _DAY_XVAR('sts_fromdate') + ' + sn_daynumber - 1 <= ' + _DAY_XLIT('To') + ' then day_price = day_price * (100 - {Percentage}) / 100 end'
luaTemplSupportedVersions = ['if ' + _DAY_XVAR('sts_fromdate') + ' + sn_daynumber - 1 >= ' + _DAY_XLIT('From') + _OP_AND + _DAY_XVAR('sts_fromdate') + ' + sn_daynumber - 1 <= ' + _DAY_XLIT('To') + ' then day_price = sn_standardamount * (100 - {Percentage}) / 100 end']
param = _DATE_RANGE_DICT('From', 2012, 1, 1, 'To', 2012, 12, 31, 'Percentage', 9.0)
validationTemplate = _DATE_RANGE_VALID_EXPR('From', 'To') + ' and int({Percentage}) in range(1,101)'
validationCaption = _TR("Percentage value ({Percentage}) has to be between 1 and 100 and start date (" + _DATE_FORMAT('From') + ") has to lie before the End date (" + _DATE_FORMAT('To') + ")")

[ActionType9]
typeCaption = _TR("Percentage on day price")
isExclusive = True
paramTemplate = "{Percentage}"
luaTemplate = 'day_price = day_price * (100 - {Percentage}) / 100'
luaTemplSupportedVersions = []
param = {'Percentage on day price' : 6.0}
validationTemplate = 'int({DiscountPercentage}) in range(-100,101)'
validationCaption = _TR("Percentage value ({Percentage}) has to be between -100 (surcharge) and 100 (discount)")


